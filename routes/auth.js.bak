const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const Joi = require('joi');
const prisma = require('../src/lib/prisma');
const { auditLog } = require('../middleware/auth');
const { requirePermission } = require('../middleware/permissions');

const router = express.Router();

// POST /api/auth/login - Autenticação do usuário
router.post('/login', auditLog('LOGIN', 'users', 'email'), async (req, res) => {
  try {
    const loginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string().required()
    });

    const { error, value } = loginSchema.validate(req.body);
    if (error) {
      return res.status(400).json({ error: 'Dados inválidos', details: error.details.map(d => d.message) });
    }

    const { email, password } = value;

    const user = await prisma.user.findUnique({ where: { email } });

    if (!user) {
      return res.status(401).json({ error: 'Credenciais inválidas', code: 'INVALID_CREDENTIALS' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.senha);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Credenciais inválidas', code: 'INVALID_CREDENTIALS' });
    }

    if (user.status !== 'ATIVO') {
      return res.status(403).json({ error: 'Usuário inativo ou suspenso', code: 'USER_INACTIVE' });
    }

    await prisma.user.update({
      where: { id: user.id },
      data: { ultimoLogin: new Date() }
    });

    const token = jwt.sign(
      { id: user.id, perfil: user.perfil },
      process.env.JWT_SECRET,
      { expiresIn: '8h' }
    );

    res.json({
      message: 'Login bem-sucedido',
      token,
      user: { id: user.id, nome: user.nome, perfil: user.perfil }
    });

  } catch (error) {
    console.error('Erro no login:', error);
    res.status(500).json({ error: 'Erro interno do servidor', code: 'INTERNAL_ERROR' });
  }
});

// Rota para validar o token
router.get('/validate-token', (req, res) => {
    const authHeader = req.headers['authorization'];
    if (!authHeader) {
        return res.status(401).json({ valid: false, error: 'Token não fornecido' });
    }

    const token = authHeader.split(' ')[1];
    if (!token) {
        return res.status(401).json({ valid: false, error: 'Token mal formatado' });
    }

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ valid: false, error: 'Token inválido ou expirado' });
        }
        res.json({ valid: true, user });
    });
});

module.exports = router;


