generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ENUMS
enum UserRole {
  USUARIO
  GESTOR
  ADMIN
}

enum UserStatus {
  ATIVO
  INATIVO
}

enum FeedbackType {
  ELOGIO
  SUGESTAO
  CRITICA
}

enum FeedbackStatus {
  ABERTO
  EM_ANALISE
  CONCLUIDO
  ARQUIVADO
}

enum ReportType {
  FEEDBACK_SUMMARY
  USER_ENGAGEMENT
}

// MODELS
model User {
  id                   String     @id @default(uuid())
  nome                 String
  email                String     @unique
  senha                String
  cargo                String?
  departamentoId       String?
  perfil               UserRole   @default(USUARIO)
  foto                 String?    @db.Text
  telefone             String?
  dataAdmissao         DateTime?  @db.Date
  status               UserStatus @default(ATIVO)
  resetPasswordToken   String?    @unique
  resetPasswordExpires DateTime?

  // Relação: O usuário pertence a um departamento
  departamento          Department? @relation("MembrosDoDepartamento", fields: [departamentoId], references: [id])
  // Relação: O usuário gerencia um departamento
  departamentoGerenciado Department? @relation("GestorDoDepartamento")

  feedbacksCriados     Feedback[]  @relation("CriadosPeloUsuario")
  feedbacksRecebidos   Feedback[]  @relation("RecebidosPeloUsuario")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id        String @id @default(uuid())
  nome      String @unique
  descricao String?
  gestorId  String? @unique

  // Relação: O departamento tem um gestor (usuário)
  gestor    User?   @relation("GestorDoDepartamento", fields: [gestorId], references: [id])
  // Relação: O departamento tem muitos membros (usuários)
  membros   User[]  @relation("MembrosDoDepartamento")
  feedbacks Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id           String         @id @default(uuid())
  titulo       String
  descricao    String         @db.Text
  tipo         FeedbackType
  status       FeedbackStatus @default(ABERTO)
  isAnonymous  Boolean        @default(false)
  departamentoId String?

  autorId      String?
  avaliadoId   String

  departamento Department? @relation(fields: [departamentoId], references: [id])
  autor        User?       @relation("CriadosPeloUsuario", fields: [autorId], references: [id])
  avaliado     User        @relation("RecebidosPeloUsuario", fields: [avaliadoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id          String     @id @default(uuid())
  type        ReportType
  generatedBy String
  data        Json
  startDate   DateTime
  endDate     DateTime

  createdAt DateTime @default(now())
}

model SystemSettings {
  id    String @id @default(uuid())
  key   String @unique
  value Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
